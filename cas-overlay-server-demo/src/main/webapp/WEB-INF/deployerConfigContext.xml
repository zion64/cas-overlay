<?xml version="1.0" encoding="UTF-8"?>
<!--

	Licensed to Jasig under one or more contributor license
	agreements. See the NOTICE file distributed with this work
	for additional information regarding copyright ownership.
	Jasig licenses this file to you under the Apache License,
	Version 2.0 (the "License"); you may not use this file
	except in compliance with the License. You may obtain a
	copy of the License at the following location:

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an
	"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	KIND, either express or implied. See the License for the
	specific language governing permissions and limitations
	under the License.

-->
<!--
	| deployerConfigContext.xml centralizes into one file some of the declarative configuration that
	| all CAS deployers will need to modify.
	|
	| This file declares some of the Spring-managed JavaBeans that make up a CAS deployment.
	| The beans declared in this file are instantiated at context initialization time by the Spring
	| ContextLoaderListener declared in web.xml. It finds this file because this
	| file is among those declared in the context parameter "contextConfigLocation".
	|
	| By far the most common change you will need to make in this file is to change the last bean
	| declaration to replace the default authentication handler with
	| one implementing your approach for authenticating usernames and passwords.
	+ -->

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">


	<bean id="authenticationManager" class="org.jasig.cas.authentication.PolicyBasedAuthenticationManager" p:authenticationPolicy-ref="authenticationPolicy">
		<constructor-arg>
			<map>
				<entry key-ref="ldapAuthenticationHandler" value-ref="ldapPrincipalResolver" />
			</map>
		</constructor-arg>
		<property name="authenticationMetaDataPopulators">
			<bean class="org.jasig.cas.authentication.SuccessfulHandlerMetaDataPopulator" />
		</property>
	</bean>





	<bean id="ldapAuthenticationHandler" class="org.jasig.cas.authentication.LdapAuthenticationHandler" p:principalIdAttribute="mail" c:authenticator-ref="authenticator">
		<property name="principalAttributeMap">
			<map>
				<!--
					| This map provides a simple attribute resolution mechanism.
					| Keys are LDAP attribute names, values are CAS attribute names.
					| Use this facility instead of a PrincipalResolver if LDAP is
					| the only attribute source.
				-->
				<entry key="member" value="member" />
				<entry key="mail" value="mail" />
				<entry key="displayName" value="displayName" />
			</map>
		</property>
	</bean>

	<bean id="authenticator" class="org.ldaptive.auth.Authenticator" c:resolver-ref="dnResolver" c:handler-ref="authHandler" />
	<bean id="dnResolver" class="org.ldaptive.auth.PooledSearchDnResolver" 
		p:baseDn="${ldap.baseDn}" 
		p:allowMultipleDns="false" 
		p:connectionFactory-ref="searchPooledLdapConnectionFactory"
		p:userFilter="${ldap.authn.searchFilter}" />
	<bean id="searchPooledLdapConnectionFactory" class="org.ldaptive.pool.PooledConnectionFactory" 
		p:connectionPool-ref="searchConnectionPool" />
	<bean id="searchConnectionPool" parent="abstractConnectionPool" 
		p:connectionFactory-ref="searchConnectionFactory" />
	<bean id="searchConnectionFactory" class="org.ldaptive.DefaultConnectionFactory" 
		p:connectionConfig-ref="searchConnectionConfig" />
	<bean id="searchConnectionConfig" parent="abstractConnectionConfig" 
		p:connectionInitializer-ref="bindConnectionInitializer" />
	<bean id="bindConnectionInitializer" class="org.ldaptive.BindConnectionInitializer" 
		p:bindDn="${ldap.managerDn}">
		<property name="bindCredential">
			<bean class="org.ldaptive.Credential" c:password="${ldap.managerPassword}" />
		</property>
	</bean>
	<bean id="abstractConnectionPool" abstract="true" class="org.ldaptive.pool.BlockingConnectionPool" init-method="initialize" 
		p:poolConfig-ref="ldapPoolConfig"
		p:blockWaitTime="${ldap.pool.blockWaitTime}" 
		p:validator-ref="searchValidator" 
		p:pruneStrategy-ref="pruneStrategy" />
	<bean id="abstractConnectionConfig" abstract="true" class="org.ldaptive.ConnectionConfig" 
		p:ldapUrl="${ldap.url}" 
		p:connectTimeout="${ldap.connectTimeout}"
		p:useStartTLS="${ldap.useStartTLS}" 
		p:sslConfig-ref="sslConfig" />
	<bean id="ldapPoolConfig" class="org.ldaptive.pool.PoolConfig" 
		p:minPoolSize="${ldap.pool.minSize}" 
		p:maxPoolSize="${ldap.pool.maxSize}"
		p:validateOnCheckOut="${ldap.pool.validateOnCheckout}" 
		p:validatePeriodically="${ldap.pool.validatePeriodically}" 
		p:validatePeriod="${ldap.pool.validatePeriod}" />
	<bean id="sslConfig" class="org.ldaptive.ssl.SslConfig">
		<property name="credentialConfig">
			<bean class="org.ldaptive.ssl.X509CredentialConfig" p:trustCertificates="${ldap.trustedCert}" />
		</property>
	</bean>
	<bean id="pruneStrategy" class="org.ldaptive.pool.IdlePruneStrategy" p:prunePeriod="${ldap.pool.prunePeriod}" p:idleTime="${ldap.pool.idleTime}" />
	<bean id="searchValidator" class="org.ldaptive.pool.SearchValidator" />
	<bean id="authHandler" class="org.ldaptive.auth.PooledBindAuthenticationHandler" p:connectionFactory-ref="bindPooledLdapConnectionFactory" />
	<bean id="bindPooledLdapConnectionFactory" class="org.ldaptive.pool.PooledConnectionFactory" p:connectionPool-ref="bindConnectionPool" />
	<bean id="bindConnectionPool" parent="abstractConnectionPool" p:connectionFactory-ref="bindConnectionFactory" />
	<bean id="bindConnectionFactory" class="org.ldaptive.DefaultConnectionFactory" p:connectionConfig-ref="bindConnectionConfig" />
	<bean id="bindConnectionConfig" parent="abstractConnectionConfig" />






	<!--
		Bean that defines the attributes that a service may return. This example uses the Stub/Mock version. A real implementation
		may go against a database or LDAP server. The id should remain "attributeRepository" though.
		+ -->
	<bean id="attributeRepository" class="org.jasig.services.persondir.support.StubPersonAttributeDao" p:backingMap-ref="attrRepoBackingMap" />

	<util:map id="attrRepoBackingMap">
		<entry key="uid" value="uid" />
		<entry key="prÃ©nom" value="eduPersonAffiliation" />
		<entry key="groupMembership" value="groupMembership" />
	</util:map>

	<!--
		Sample, in-memory data store for the ServiceRegistry. A real implementation
		would probably want to replace this with the JPA-backed ServiceRegistry DAO
		The name of this bean should remain "serviceRegistryDao".
		+ -->
	<bean id="serviceRegistryDao" class="org.jasig.cas.services.InMemoryServiceRegistryDaoImpl" p:registeredServices-ref="registeredServicesList" />

	<util:list id="registeredServicesList">
		<bean class="org.jasig.cas.services.RegexRegisteredService">
			<property name="id" value="0" />
			<property name="name" value="front" />
			<property name="description" value="Allows only front services" />
			<property name="serviceId" value="^https?://front.*" />
			<property name="evaluationOrder" value="10000001" />
			<property name="logoutType" value="FRONT_CHANNEL" />
			<property name="anonymousAccess" value="true" />
		</bean>
		<bean class="org.jasig.cas.services.RegexRegisteredService">
			<property name="id" value="1" />
			<property name="name" value="back" />
			<property name="description" value="Allows only back services" />
			<property name="serviceId" value="^https?://back.*" />
			<property name="evaluationOrder" value="10000002" />
		</bean>
		<bean class="org.jasig.cas.services.RegexRegisteredService">
			<property name="id" value="2" />
			<property name="name" value="localhost" />
			<property name="description" value="Allows only localhost services" />
			<property name="serviceId" value="^https?://localhost.*" />
			<property name="evaluationOrder" value="10000003" />
		</bean>
		<!--
			Use the following definition instead of the above to further restrict access
			to services within your domain (including sub domains).
			Note that example.com must be replaced with the domain you wish to permit.
			This example also demonstrates the configuration of an attribute filter
			that only allows for attributes whose length is 3.
		-->
		<!--
			<bean class="org.jasig.cas.services.RegexRegisteredService">
			<property name="id" value="1" />
			<property name="name" value="HTTP and IMAP on example.com" />
			<property name="description" value="Allows HTTP(S) and IMAP(S) protocols on example.com" />
			<property name="serviceId" value="^(https?|imaps?)://([A-Za-z0-9_-]+\.)*example\.com/.*" />
			<property name="evaluationOrder" value="0" />
			<property name="attributeFilter">
			<bean class="org.jasig.cas.services.support.RegisteredServiceRegexAttributeFilter" c:regex="^\w{3}$" />
			</property>
			</bean>
		-->
	</util:list>

	<bean id="auditTrailManager" class="com.github.inspektr.audit.support.Slf4jLoggingAuditTrailManager" />

	<bean id="healthCheckMonitor" class="org.jasig.cas.monitor.HealthCheckMonitor" p:monitors-ref="monitorsList" />

	<util:list id="monitorsList">
		<bean class="org.jasig.cas.monitor.MemoryMonitor" p:freeMemoryWarnThreshold="10" />
		<!--
			NOTE
			The following ticket registries support SessionMonitor:
			* DefaultTicketRegistry
			* JpaTicketRegistry
			Remove this monitor if you use an unsupported registry.
		-->
		<bean class="org.jasig.cas.monitor.SessionMonitor" p:ticketRegistry-ref="ticketRegistry" p:serviceTicketCountWarnThreshold="5000"
			p:sessionCountWarnThreshold="100000" />
	</util:list>
</beans>
