<?xml version="1.0" encoding="UTF-8"?>
<!--

	Licensed to Jasig under one or more contributor license
	agreements. See the NOTICE file distributed with this work
	for additional information regarding copyright ownership.
	Jasig licenses this file to you under the Apache License,
	Version 2.0 (the "License"); you may not use this file
	except in compliance with the License. You may obtain a
	copy of the License at the following location:

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an
	"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	KIND, either express or implied. See the License for the
	specific language governing permissions and limitations
	under the License.

-->
<!--
	| deployerConfigContext.xml centralizes into one file some of the declarative configuration that
	| all CAS deployers will need to modify.
	|
	| This file declares some of the Spring-managed JavaBeans that make up a CAS deployment.
	| The beans declared in this file are instantiated at context initialization time by the Spring
	| ContextLoaderListener declared in web.xml. It finds this file because this
	| file is among those declared in the context parameter "contextConfigLocation".
	|
	| By far the most common change you will need to make in this file is to change the last bean
	| declaration to replace the default SimpleTestUsernamePasswordAuthenticationHandler with
	| one implementing your approach for authenticating usernames and passwords.
	+ -->

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:sec="http://www.springframework.org/schema/security" xmlns:c="http://www.springframework.org/schema/c"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">

	<!--
		This bean defines the security roles for the Services Management application. Simple deployments can use the in-memory version.
		More robust deployments will want to use another option, such as the Jdbc version.

		The name of this should remain "userDetailsService" in order for Spring Security to find it.
	-->
	<!-- <sec:user name="@@THIS SHOULD BE REPLACED@@" password="notused" authorities="ROLE_ADMIN" /> -->

    <sec:user-service id="userDetailsService" 
                      properties="${user.details.file.location:classpath:user-details.properties}"  />
                      
<!-- 	<sec:user-service id="userDetailsService"> -->
<!-- 		<sec:user name="00010017" password="notused" authorities="ROLE_ADMIN" /> -->
<!-- 	</sec:user-service> -->


	<import resource="attributeRepositoryConfigContext.xml"/>
	
	
	
	
	
	
	
	
	<!--
		Sample, in-memory data store for the ServiceRegistry. A real implementation
		would probably want to replace this with the JPA-backed ServiceRegistry DAO
		The name of this bean should remain "serviceRegistryDao".
	-->
    <bean id="serviceRegistryDao" class="org.jasig.cas.adaptors.ldap.services.LdapServiceRegistryDao" init-method="init"
          p:connectionFactory-ref="pooledLdapConnectionFactory"
          p:searchRequest-ref="searchRequest" />

    <bean id="searchRequest" class="org.ldaptive.SearchRequest"
          p:baseDn="${ldap.service.baseDn}" />

    <bean id="pooledLdapConnectionFactory" class="org.ldaptive.pool.PooledConnectionFactory"
          p:connectionPool-ref="connectionPool" />

    <bean id="connectionPool" class="org.ldaptive.pool.BlockingConnectionPool" init-method="initialize"
          p:poolConfig-ref="ldapPoolConfig"
          p:blockWaitTime="${ldap.pool.blockWaitTime}"
          p:validator-ref="searchValidator"
          p:pruneStrategy-ref="pruneStrategy"
          p:connectionFactory-ref="connectionFactory" />


    <bean id="ldapPoolConfig" class="org.ldaptive.pool.PoolConfig"
          p:minPoolSize="${ldap.pool.minSize}"
          p:maxPoolSize="${ldap.pool.maxSize}"
          p:validateOnCheckOut="${ldap.pool.validateOnCheckout}"
          p:validatePeriodically="${ldap.pool.validatePeriodically}"
          p:validatePeriod="${ldap.pool.validatePeriod}" />

    <bean id="connectionFactory" class="org.ldaptive.DefaultConnectionFactory"
          p:connectionConfig-ref="connectionConfig" />

    <bean id="connectionConfig" class="org.ldaptive.ConnectionConfig"
          p:ldapUrl="${ldap.url}"
          p:connectTimeout="${ldap.connectTimeout}"
          p:useStartTLS="${ldap.useStartTLS}"
          p:sslConfig-ref="sslConfig"
          p:connectionInitializer-ref="bindConnectionInitializer"/>

    <bean id="bindConnectionInitializer" class="org.ldaptive.BindConnectionInitializer"
          p:bindDn="${ldap.managerDn}">
        <property name="bindCredential">
            <bean class="org.ldaptive.Credential"
                  c:password="${ldap.managerPassword}" />
        </property>
    </bean>

    <bean id="sslConfig" class="org.ldaptive.ssl.SslConfig">
        <property name="credentialConfig">
            <bean class="org.ldaptive.ssl.X509CredentialConfig"
                  p:trustCertificates="${ldap.trustedCert}" />
        </property>
    </bean>
    <bean id="pruneStrategy" class="org.ldaptive.pool.IdlePruneStrategy"
          p:prunePeriod="${ldap.pool.prunePeriod}"
          p:idleTime="${ldap.pool.idleTime}" />
	<bean id="searchValidator" class="org.ldaptive.pool.SearchValidator" />






	<bean id="auditTrailManager" class="com.github.inspektr.audit.support.Slf4jLoggingAuditTrailManager" />
</beans>
